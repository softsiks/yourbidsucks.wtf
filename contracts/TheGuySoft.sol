// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";


contract TheGuySoft is ERC721, Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using Counters for Counters.Counter;
    
    Counters.Counter private _tokenIdCounter;
    
    struct Payee {
        address wallet;
        string role;
        uint256 percentage;
    }
    
    modifier onlyUser(address _sender) {
        //require(tx.origin == msg.sender, "contracts are not allowed");
        uint32 size;
        assembly {
            size := extcodesize(_sender)
        }
        require(size == 0, "contracts are not allowed");
        _;
    }
    
    uint256 public mintPrice = 0.01 ether;
    
    // mainnet
    IERC721 internal BLITMAP_CONTRACT = IERC721(0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63);
    
    // test
    //IERC721 internal BLITMAP_CONTRACT = IERC721(0x1b4C2BA0c7Ee2AAF7710A11c3a2113C24624852B);
    
    function withdrawToPayees(uint256 _amount) internal onlyUser(msg.sender) {
        //MAINNET
        Payee memory payee1 = Payee(0x3B99E794378bD057F3AD7aEA9206fB6C01f3Ee60, "artist", 25);
        Payee memory payee2 = Payee(0x575CBC1D88c266B18f1BB221C1a1a79A55A3d3BE, "developer", 25);
        Payee memory payee3 = Payee(BLITMAP_CONTRACT.ownerOf(346), "owner of #346", 50);
        Payee[3] memory payees = [payee1, payee2, payee3];
        
        
        for (uint256 i = 0; i < payees.length; i++) {
            Payee memory payee = payees[i];
            address payable to = payable(payee.wallet);
            to.transfer(_amount.mul(payee.percentage).div(100));    
        }
    }


    constructor() ERC721("The Soft Bid Guy", "BIDGUY") onlyOwner {}

    function mint(uint256 amount) external payable nonReentrant {
        require(msg.value >= mintPrice.mul(amount), "not enough ethers");
        withdrawToPayees(msg.value);
        for (uint256 i = 0; i < amount; i++) {
            _safeMint(msg.sender, _tokenIdCounter.current());
            _tokenIdCounter.increment();
        }
    }
    
    
    function mintTo(address to, uint256 amount) external payable nonReentrant {
        require(msg.value >= mintPrice.mul(amount), "not enough ethers");
        withdrawToPayees(msg.value);
        for (uint256 i = 0; i < amount; i++) {
            _safeMint(to, _tokenIdCounter.current());
            _tokenIdCounter.increment();            
        }
        
    }

    function _baseURI() internal pure override returns (string memory) {
        return "data:application/json;base64,#";
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
    
    
}
